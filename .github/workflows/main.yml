name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1' # Weekly security scan on Monday at 2 AM UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Phase 1: Quality Assurance & Testing
  quality-assurance:
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.test-result.outcome == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun Runtime
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install Dependencies
      run: bun install
      
    - name: Run Unit Tests with Coverage
      id: test-result
      run: bun run test:coverage
      
    - name: Upload Test Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Phase 2: Security Vulnerability Assessment
  security-assessment:
    runs-on: ubuntu-latest
    needs: quality-assurance
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy Filesystem Vulnerability Scan
      id: trivy-fs
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        
    - name: Upload Security Scan Results to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.trivy-fs.outcome == 'success'
      with:
        sarif_file: 'trivy-fs-results.sarif'
        
    - name: Display Vulnerability Report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'

  # Phase 3: Application Build & Packaging
  application-build:
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-assessment]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun Runtime
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install Dependencies
      run: bun install
      
    - name: Build Production Application
      run: bun run build
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: dist/

  # Phase 4: Container Image Build
  container-build:
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-assessment]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Production Container Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: jambo-draw-winner:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Verify Container Image Build
      run: |
        echo "âœ… Docker container image built successfully"
        docker images jambo-draw-winner:latest

  # Phase 5: Production Deployment
  production-deployment:
    runs-on: ubuntu-latest
    needs: [quality-assurance, application-build, container-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun Runtime for Deployment
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install Dependencies
      run: bun install
        
    - name: Build Application for Production
      run: bun run build
        
    - name: Upload Production Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-deployment
        path: dist/
